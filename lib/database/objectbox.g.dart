// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'aluno.dart';
import 'turma.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6326984160275044103),
      name: 'Aluno',
      lastPropertyId: const IdUid(3, 400183479853746462),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1150157594684077802),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2934453558860967631),
            name: 'nome',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 400183479853746462),
            name: 'matricula',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5041823271199142816),
            name: 'turmas',
            targetId: const IdUid(2, 2333712964709171989))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2333712964709171989),
      name: 'Turma',
      lastPropertyId: const IdUid(2, 4524721376755298925),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 232986936656773937),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4524721376755298925),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 3031233674079310881),
            name: 'alunos',
            targetId: const IdUid(1, 6326984160275044103))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2333712964709171989),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(2, 3031233674079310881),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Aluno: EntityDefinition<Aluno>(
        model: _entities[0],
        toOneRelations: (Aluno object) => [],
        toManyRelations: (Aluno object) =>
            {RelInfo<Aluno>.toMany(1, object.id): object.turmas},
        getId: (Aluno object) => object.id,
        setId: (Aluno object, int id) {
          object.id = id;
        },
        objectToFB: (Aluno object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final matriculaOffset = fbb.writeString(object.matricula);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, matriculaOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final matriculaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              Aluno(id: idParam, nome: nomeParam, matricula: matriculaParam);
          InternalToManyAccess.setRelInfo<Aluno>(
              object.turmas, store, RelInfo<Aluno>.toMany(1, object.id));
          return object;
        }),
    Turma: EntityDefinition<Turma>(
        model: _entities[1],
        toOneRelations: (Turma object) => [],
        toManyRelations: (Turma object) =>
            {RelInfo<Turma>.toMany(2, object.id): object.alunos},
        getId: (Turma object) => object.id,
        setId: (Turma object, int id) {
          object.id = id;
        },
        objectToFB: (Turma object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Turma(id: idParam, nome: nomeParam);
          InternalToManyAccess.setRelInfo<Turma>(
              object.alunos, store, RelInfo<Turma>.toMany(2, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Aluno] entity fields to define ObjectBox queries.
class Aluno_ {
  /// see [Aluno.id]
  static final id = QueryIntegerProperty<Aluno>(_entities[0].properties[0]);

  /// see [Aluno.nome]
  static final nome = QueryStringProperty<Aluno>(_entities[0].properties[1]);

  /// see [Aluno.matricula]
  static final matricula =
      QueryStringProperty<Aluno>(_entities[0].properties[2]);

  /// see [Aluno.turmas]
  static final turmas =
      QueryRelationToMany<Aluno, Turma>(_entities[0].relations[0]);
}

/// [Turma] entity fields to define ObjectBox queries.
class Turma_ {
  /// see [Turma.id]
  static final id = QueryIntegerProperty<Turma>(_entities[1].properties[0]);

  /// see [Turma.nome]
  static final nome = QueryStringProperty<Turma>(_entities[1].properties[1]);

  /// see [Turma.alunos]
  static final alunos =
      QueryRelationToMany<Turma, Aluno>(_entities[1].relations[0]);
}
